// NextJS 란?
// - 프로덕션용 React 프레임워크, 큰 규모의 프로덕션용 React 앱을 쉽게 구축할 수 있도록 해주는 많은 기능을 가지고 있다.
// - ReactJS의 풀스택 프레임 워크.
// - 대규모 React 프로젝트를 구축할때, 라우팅 혹은 인증 등의 과정을 돕는 라이브러리가 추가적으로 필요하다
// - 코드를 작성하는 방법 , 어떻게 파일을 구조화해야하는지에 대한 가이드라인을 NextJS는 있다.
// - 다양한 핵심 기능을 추가해주어 , React를 더욱 강력하게 만들어준다.(ex 라우팅 및 다양한 기능)

// NextJS의 핵심 기능

// 1. 서버 측 렌더링 지원
// 서버 측 렌더링 이란?
// 클라이언트 측이 아닌 서버 측의 페이지 상에 렌더링되는 콘텐츠 처리
// React만을 이용해 구축된 일반적인 React 애플리케이션에서 소스코드를 보면 페이지가 시작되는 부분부터 상당히 비어있는것을 확인할수 있다.
// 기본적인 HTML 뼈대와 엔트리 포인트 및 id="root" 부분에만, React 앱이 로딩되고 렌더링 되어있다. 이 렌더링은 전부 React에 의해 처리된다.
// React는 클라이언트 측 JS 라이브러리이기 때문에 렌더링은 전부 클라이언트 측에서 처리된다. 서버가 아닌 사용자의 브라우저에서 처리가 된다.
// 그 결과, 사용자가 페이지를 방문했을때 서버에서 클라이언트 측으로 전송되는 HTML 코드에 별 내용이 없는 것이다.
// 해당 페이지가 서ㅓㅂ에서 미리 렌더링이 되는 즉, 요청이 서버로 도달할때 데이터 페칭이 서버측에서 처리된다면 모든 내용을 포함한 페이지가
// 사용자와 검색 엔진 사용자들에게 제공될 수 있다.
// 그러면 사용자들이 페이지가 깜빡이는 로딩 상태를 경험할 필요가 없고, 검색 엔진을 통해서도 페이지의 콘텐츠 확인이 가능하다
// React 페이지, 컴포넌트를 서버 측에서 미리 렌더링 해주는 것이다
// NextJS에는 내장 서버측 렌더링이 있어, 자동으로 페이지를 미리 렌더링학기 때문에 훨씬 쉽게 작업할 수 있다.
// 결국 아무 추가 설정 없이도 페이지를 방문하면, 서버측에서 렌더링이 바로 되어 있는 상태가 된다.(이는 검색엔진 최적화가 된다.)
// 클라이언트측 및 서버측코드가 융합이 된다.

// 2. 파일 기반 라우팅
// 기존의 React에는 라우터가 아예 없다. (라우터 : 사용자에게 여러 페이지가 있는것과 같은 착각을 불러일으키는 것 , React-router)
// 라우터는 URL을 확인해 URL이 변경될때, 브라우저가 요청을 서버로 보내는 기본 동작을 방지하고, 그 대신 React를 통해 페이지 상에 다른 콘텐츠를 렌더링 하는 것
// URL을 기반해 화면에 나타나는 내용을 변경하는 것(React로 구축된 SPA상에 계속 머무르기 때문에)
// 하지만, NextJS는 이런 코드 내 라우트 정의를 사용할 필요가 없다.
// NextJS를 사용하면, 파일과 폴더에 페이지와 라우트를 정의하게 된다.
// NextJS 앱에는, 이름이 pages라고 설정되어야 하는 폴더가 있는데, 페이지가 지원하는 라우트와 경로를 정의하는 이 폴더를 구조화하게 된다.
// 이를 통해 추가적인 코드를 작성하지 않아도 된다.
// NextJS는 우리에게 필요한 중첩 라우트, 동적 매개변수를 사용하는 동적 라우트 등을 모두 지원한다.

// 3. React 프로젝트에 백엔드 코드를 추가하는 작업을 수월하게 할 수 있다.
// node.js 코드를 아주 쉽게 백엔드 API를 React 프로젝트로 추가할 수 있다.
// 한 프로젝트에 머물면서 데이터베이스, 파일로 데이터를 저장하는 코드, 데이터를 가져오거나 인증을 추가하는 등의 코드를 추가하는 작업이 아주 간편하다
// 그러면 독립적인 REST API 프로젝트를 구축할 필요없이 하나의 프로젝트를 작업하면서 React 사용자의 인터페이스인 클라이언트 측의 코드도 전부 추가할 수 있으면,
// 백엔드 API 코드와도 융합이 가능하다.

// NextJS 설치
//========================================
// npx create-next-app
//========================================

// NextJS 구성
// 1. public 폴더
// 일반적인 표준 React 앱 내에는 public 폴더 내에 index.html이 있는 반면, NextJS 앱 내에는 없다
// >> 이는 NextJS는 내장된 사전 렌더링이 포함되어있기 때문이다.
// 요청이 서버로 도달할 때에 SPA의 단일 페이지가 동적으로 사전 렌더링이 되어 콘텐츠를 포함한 초기 페이지를 반환하는 것이다
// (정확히는 NextJS로 페이지가 언제 사전 렌더링 될지 결정할수 있게 된다.)

// 2. pages 폴더
// 앱을 구성하는 다양한 페이지들을 정의할 때 가장 중요하다.
// 이 폴더에 파일 기반의 라우팅을 설정할 것이기 떄문에.

// 3. styles 폴더
// 차근차근 알아보자.

// NextJS앱의 작동원리

// npm run dev : 개발 서버를 실행시키게 된다.
// 개발 서버는 NextJS 페이지 및 앱의 전반을 담당하는 내장 서버로 코드를 확인해 파일에 변경 사항이 저장될 때마다
// 브라우저에 나타나는 페이지를 새로고침하고 업데이트해서 최고의 개발 경험을 제공해 준다.

// npm run build : 앱의 배포 준비가 되면 배포에 최적화된 출력값을 위해, 실행해서 프로덕션용으로 구축하게 된다.

// npm start : 최적화된 서버를 시작

// npm run dev를 실행하게 되면 기본적으로 localhost:3000으로 접속하게 되고, 첫번째 화면은 pages 폴더에 index.js 파일에서 나온것이다
