// 서버사이드 세션 & 인증 토큰

// 서버사이드 세션
// 서버에 고유 식별자를 저장하는 방식으로 작동, 고유한 세션 ID를 생성하고, 그걸 데이터베이스와 같은 서버에 저장해두고
// 크리덴셜을 전송하는 클라이언트에 동일한 식별자로 보낸다. 그러면 클라이언트는 해당 ID, 해당 식별자를 저장한다.
// 그리고, 서버의 보호된 리소스에 요청을 보낼때 저장된 식별자를 첨부해준다.
// 서버는 들어오는 요청에서 해당 식별자를 추출해 데이터 베이스에 저장된 식별자가 맞는지 확인한다. 식별자가 옮다면 승인, 아니라면 거부한다.
// 그렇게 하면 식별자를 가진 클라이언트만이 요청을 보낼수 있다.
// 연결을 암호화하는데 SSL을 사용하기때문에 전송중에 도난당하지 않는다.
// 그리고, 클라이언트 사이드에선 대체로 쿠키에 식별자를 저장하는데, 사이트간 스크립팅 공격을 방지하기 위해, JS를 통해서는 쿠키에 접근할수 없도록 구성했다.

// 인증 토큰
// 서버가 어떤 식별자도 저장하지 않는다.
// 대신 임의의 문자열이라는 토큰을 생성하고 서명한다. >> 데이터 패키지를 열 수 있는 임의의 문자열
// 이 토큰이 클라이언트로 전송된다.
// 클라이언트는 해당 토큰을 저장하고 나가는 요청에 다시 첨부해 서버에 엑세스를 허가해도된다고 알린다.

// SPA를 구성핼때 결국 Next.js를 사용해 작업하게 된다.
// 세션보단 토큰으로 주로 작업을 하게 된다.
// 페이지는 직접 제공되고 반드시 서버에 도달하지 않아도 논리로 채워진다.
// 물론 Next.js로 작업할때, getServerSideProps를 사용하는 페이지를 구축할 수 있으니
// 페이지가 제공될때마다 서버에서 처리하는 요청도 물론 있겠지만, 미리 생성된 페이지도 많이 있다.
// 그리고 일단 사용자가 웹사이트에 있으면 많은 페이지를 백엔드에서 가져올수 없고,
// 대신 프론트엔드 JS를 통해 동적으로 로드 및 생성된다.
// 첫 페이지가 로드된 후 웹사이트를 구성하는 많은 페이지가 SPA를 가지기 때문이다
// 그리고 JS와 React가 인계받아 웹사이트를 처리한다.
// 우리가 방문하는 페이지마다 모두 요청을 보내는것은 아니다.
// getServerSideProps를 모든 페이지에서 사용하진 않기 때문에
// 따라서 서버는 우리가 보내는 요청을 전부 보진 못한다.
// 그러므로 서버가 우리의 인증 여부를 직접 확인할 수 없는 상태에서 페이지가 로드된다.
// 또한 SPA 사용되는 백엔드 API는 일반적으로 무상태이다. 연결된 개별 클라이언트를 따로 신경쓰지 않는다.
// 대신 API가 거의 자체적으로 작업을 수행할 수 있다.
// 그리고 인증된 클라이언트에 권한을 전달해서 보호된 리소스에 대한 엑세스를 나중에 요청할수있다.
// API 자체는 연결된 클라이언트에 대한 어떠한 추가 정보도 저장하지 않는다.
// 서버는 페이지에서 일어나는 모든 요청이나 작업에 일일이 관여하지 않는다.
